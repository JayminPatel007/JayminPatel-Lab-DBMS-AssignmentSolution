DROP DATABASE IF EXISTS ECommerse;
CREATE DATABASE ECommerse;
USE ECommerse;

# 1
CREATE TABLE Supplier(
	SUPP_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    SUPP_NAME varchar(255) NOT NULL,
    SUPP_CITY varchar(255),
    SUPP_PHONE varchar(10)
);
CREATE TABLE Customer(
	CUS_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    CUS_NAME varchar(255) NOT NULL,
    CUS_CITY varchar(255),
    CUS_PHONE varchar(10),
    CUS_GENDER char(1)
);
CREATE TABLE Category(
	CAT_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    CAT_NAME varchar(255) NOT NULL
);
CREATE TABLE Product(
	PRO_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    PRO_NAME varchar(255) NOT NULL,
    PRO_DESC text,
    CAT_ID int NOT NULL,
    FOREIGN KEY (CAT_ID) REFERENCES Category(CAT_ID) ON DELETE CASCADE
);
CREATE TABLE ProductDetails(
	PROD_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    PRO_ID int NOT NULL,
    SUPP_ID int NOT NULL,
    PRICE decimal NOT NULL,
    FOREIGN KEY (PRO_ID) REFERENCES Product(PRO_ID) ON DELETE CASCADE,
    FOREIGN KEY (SUPP_ID) REFERENCES Supplier(SUPP_ID) ON DELETE CASCADE
);
CREATE TABLE Orders(
	ORD_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    ORD_AMOUNT int NOT NULL,
    ORD_DATE date NOT NULL,
    CUS_ID int NOT NULL,
    PROD_ID int NOT NULL,
    FOREIGN KEY (CUS_ID) REFERENCES Customer(CUS_ID) ON DELETE CASCADE,
    FOREIGN KEY (PROD_ID) REFERENCES ProductDetails(PROD_ID) ON DELETE CASCADE
);
CREATE TABLE Rating(
	RAT_ID int PRIMARY KEY NOT NULL AUTO_INCREMENT,
    CUS_ID int NOT NULL,
    SUPP_ID int NOT NULL,
    RAT_RATSTARS decimal NOT NULL,
    FOREIGN KEY (CUS_ID) REFERENCES Customer(CUS_ID) ON DELETE CASCADE,
    FOREIGN KEY (SUPP_ID) REFERENCES Supplier(SUPP_ID) ON DELETE CASCADE
);

# 2
INSERT INTO Supplier(SUPP_NAME, SUPP_CITY, SUPP_PHONE)
	VALUES ("Rajesh Retails", "Delhi", "1234567890"),
		   ("Appario Ltd.", "Mumbai", "2589631470"),
           ("Knome products", "Banglore", "9785462315"),
           ("Bansal Retails", "Kochi", "8975463285"),
           ("Mittal Ltd.", "Lucknow", "7898456532");

INSERT INTO Customer(CUS_NAME, CUS_PHONE, CUS_CITY, CUS_GENDER)
	VALUES ("AAKASH", "9999999999", "DELHI", "M"),
		   ("AMAN", "9785463215", "NOIDA", "M"),
           ("NEHA", "9999999999", "MUMBAI", "F"),
           ("MEGHA", "9994562399", "KOLKATA", "F"),
           ("PULKIT", "7895999999", "LUCKNOW", "M");

INSERT INTO Category(CAT_NAME)
	VALUES ("BOOKS"),
		   ("GAMES"),
           ("GROCERIES"),
           ("ELECTRONICS"),
           ("CLOTHES");

INSERT INTO Product(PRO_NAME, PRO_DESC, CAT_ID)
	VALUES ("GTA V", "DFJDJFDJFDJFDJFJF", 2),
		   ("TSHIRT", "DFDFJDFJDKFD", 5),
           ("ROG LAPTOP", "DFNTTNTNTERND", 4),
           ("OATS", "REURENTBTOTH", 3),
           ("HARRY POTTER", "NBEMCTHTJTH", 1);

INSERT INTO ProductDetails(PRO_ID, SUPP_ID, PRICE)
	VALUES (1, 2, 1500),
		   (3, 5, 30000),
           (5, 1, 3000),
           (2, 3, 2500),
           (4, 1, 1000);

INSERT INTO Orders(ORD_AMOUNT, ORD_DATE, CUS_ID, PROD_ID)
	VALUES (1500, "2021-10-12", 3, 5),
		   (30500, "2021-09-16", 5, 2),
           (2000, "2021-10-05", 1, 1),
           (3500, "2021-08-16", 4, 3),
           (2000, "2021-10-06", 2, 1);

INSERT INTO Rating(CUS_ID, SUPP_ID, RAT_RATSTARS)
	VALUES (2, 2, 4),
		   (3, 4, 3),
           (5, 1, 5),
           (1, 3, 2),
           (4, 5, 4);
           
# 3
SELECT COUNT(CUS_ID), CUS_GENDER FROM Customer NATURAL JOIN Orders WHERE ORD_AMOUNT >= 3000 GROUP BY CUS_GENDER;

# 4
SELECT ORD_ID, ORD_AMOUNT, ORD_DATE, PRICE as PROD_PRICE, PRO_NAME FROM Orders NATURAL JOIN ProductDetails NATURAL JOIN Product WHERE CUS_ID = 2 ORDER BY PRO_NAME;

# 5
SELECT SUPP_NAME, SUPP_ID, SUPP_CITY, SUPP_PHONE FROM Supplier NATURAL JOIN ProductDetails GROUP BY SUPP_ID HAVING COUNT(PRO_ID)  > 1;

# 6
SELECT * FROM Category NATURAL JOIN Product NATURAL JOIN ProductDetails WHERE PRICE = (SELECT MIN(PRICE) FROM ProductDetails );

# 7
SELECT PRO_ID, PRO_NAME FROM Orders NATURAL JOIN ProductDetails NATURAL JOIN Product WHERE ORD_DATE > '2021-10-05';

# 8
SELECT CUS_NAME, CUS_GENDER FROM Customer WHERE CUS_NAME LIKE 'A%' OR CUS_NAME LIKE '%A';

# 9
DELIMITER &&
CREATE PROCEDURE get_supplier_rating ()
BEGIN
SELECT SUPP_ID, SUPP_NAME, AVG(RAT_RATSTARS) AS AVG_RATING, CASE WHEN AVG(RAT_RATSTARS) > 4 THEN 'Genuine Supplier' WHEN AVG(RAT_RATSTARS) > 2 THEN 'Average Supplier' ELSE 'Supplier should not be considered' END AS SUPP_RATING FROM Rating NATURAL JOIN Supplier GROUP BY SUPP_ID;
END &&

CALL get_supplier_rating();